//pref
Ambient|float|0.0|0.5|1
Diffuse|float|0.0|0.7|1
Specular|float|0.0|0.2|1
Shininess|float|1|60|120
Explode|float|0.0|0.02|0.2
Mesh exploder. Copyright 2018 Chris Rorden, BSD2clause.|note
//geom
#version 120
#extension GL_EXT_geometry_shader4 : enable
uniform float Explode;
//Intel OpenGL 4.20 Build 10.18.10.3496 on Windows 8.1 does not correctly implement
// early geometry shaders. Works fine on NVidia GPU on same setup (hybrid laptop) and with
// Intel drivers that come with OSX.

//#define INTELBUG // <- ENABLE THIS LINE TO WORK WITH BORKED INTEL DRIVERS
#ifdef INTELBUG
in vec3 vL[3];   //[3] because this makes a triangle
in vec3 vN[3];
in vec3 vV[3];
in vec4 vP[3];
in vec4 vClr[3];
out vec3 gL;
out vec3 gN;
out vec3 gV;
out vec4 gP;
out vec4 gClr;
#else
varying in vec3 vL[3];   //[3] because this makes a triangle
varying in vec3 vN[3];
varying in vec3 vV[3];
varying in vec4 vP[3];
varying in vec4 vClr[3];
varying out vec3 gE; //Edge value
varying out vec3 gL;
varying out vec3 gN;
varying out vec3 gV;
varying out vec4 gP;
varying out vec4 gClr;
#endif
void main(void) {
	vec3 P0 = gl_PositionIn[0].xyz;
	vec3 P1 = gl_PositionIn[1].xyz;
	vec3 P2 = gl_PositionIn[2].xyz;
	vec3 V0 = P0 - P1;
	vec3 V1 = P2 - P1;
	vec3 N = cross(V0, V1);
	N = normalize(N);
    for(int i=0; i < 3; i++) {
    	//gl_Position = gl_PositionIn[i];
    	gl_Position = gl_PositionIn[i]+(vec4(N,0.0) * Explode);
    	gL = vL[i];
    	gN = vN[i];
    	gV = vV[i];
    	gP = vP[i];
    	gClr = vClr[i];
        EmitVertex();
    }
    EndPrimitive();
}
//frag
uniform float Ambient, Diffuse, Specular, Shininess;
uniform vec4 ClipPlane;
varying vec3  gL, gN, gV;
varying vec4 gP, gClr;

void main() {
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, gP) > 0.0)) discard;
	vec3 l = normalize(gL);
	vec3 n = normalize(gN);
	vec3 h = normalize(l+normalize(gV));
	vec3 a = gClr.rgb * Ambient;
	vec3 d = gClr.rgb * Diffuse;
	float diff = dot(n,l);
	float spec = pow(max(0.0,dot(n,h)), Shininess);
	vec3 backcolor = Ambient*vec3(0.1+0.1+0.1) + d*abs(diff);
	float backface = step(0.00, n.z);
	gl_FragColor = vec4(mix(backcolor.rgb, a + d*diff + spec*Specular,  backface), 1.0);
}
